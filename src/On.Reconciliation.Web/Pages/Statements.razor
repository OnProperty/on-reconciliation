@page "/statements/{bankAccount}/{year:int?}/{month:int?}"
@using On.Reconciliation.Models.ViewModels
@using On.Reconciliation.Web.Components.Statements;
@using On.Reconciliation.Web.Helpers
@inject HttpClient Http

<PageTitle>Bankavstemming</PageTitle>

<h1 class="text-center text-2xl">@DottedBankAccount(BankAccount)</h1>
<div class="flex justify-between bg-blue-200 rounded-xl px-10 py-3">
    <a href="@PreviousMonthLink" class="my-auto text-4xl rounded-xl hover:scale-125 transition ease-in-out duration-300">⬅ @PreviousMonthName</a>
    <h1 class="text-center text-6xl">@Title</h1>
    @if (Date.AddMonths(1) < DateTime.Now)
    {
        <a href="@NextMonthLink" class="my-auto text-4xl hover:scale-125 transition ease-in-out duration-300">@NextMonthName ➡</a>    
    }
</div>

@if (statements == null)
{
    <p><em>Laster...</em></p>
}
else
{
    <div class="text-center text-lg">
        <div>Totalt: @(statements.Length)</div>
        @if (NumberOfUnreconciliatedStatements > 0)
        {
            <div class="text-red-600 font-bold">⚠️ @NumberOfUnreconciliatedStatements ikke bokført</div>
        }
    </div>
    @foreach (var day in statementGroups)
    {
        <div class="rounded-3xl @GetBackgroundColor(day) my-1">
            <span class="text-3xl px-4">@(day.Key).</span>
            @foreach (var statement in day.ToList())
            {
                <Statement Data=@statement />
            }    
        </div>
    }
}

@code {
    private DateTime Date;
    
    [Parameter]
    public string BankAccount { get; set; }

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    private string Title = "foo";
    private string PreviousMonthName;
    private string NextMonthName;
    private string PreviousMonthLink;
    private string NextMonthLink;

    private StatementViewModel[]? statements;

    private int NumberOfUnreconciliatedStatements
    {
        get { return statements.Count(x => x.GeneralLedgerId == null); }
    }

    private IEnumerable<IGrouping<int, StatementViewModel>> statementGroups;

    protected override async Task OnInitializedAsync()
    {
        ValidateYearAndMonth();
    }

    protected override async Task OnParametersSetAsync()
    {
        statements = (await Http.GetFromJsonAsync<StatementViewModel[]>($"https://localhost:7203/Statement/{BankAccount}/{Year}/{Month}"))?
            .OrderByDescending(x => x.Date)
            .ToArray();

        statementGroups = statements.GroupBy(x => x.Date.Value.Day);
        
        Date = new DateTime(Year!.Value, Month!.Value, 1);
        
        Title = $"{MonthHelper.FullName(Date.Month)} {Year}";
        PreviousMonthName = MonthHelper.FullName(Date.Month - 1);
        PreviousMonthLink = CreateUrl(Date.AddMonths(-1));
        NextMonthName = MonthHelper.FullName(Date.Month + 1);
        NextMonthLink = CreateUrl(Date.AddMonths(1));
        
        await base.OnParametersSetAsync();
    }

    private string GetBackgroundColor(IGrouping<int, StatementViewModel> statementViewModels)
    {
        if (statementViewModels.Any(x => x.GeneralLedgerId == null))
            return "bg-red-400";
        return "bg-slate-200";
    }

    private void ValidateYearAndMonth()
    {
        if (Year == null)
            throw new ArgumentException("Year must have a value");

        if (Month == null)
        {
            throw new ArgumentException("Month must have a value");
        }
        
        if (Month is < 1 or > 12)
            throw new Exception("Month must be between 1 and 12");

        if (Year > DateTime.Now.Year)
            throw new Exception("Year can't be in the future");

    }

    private string CreateUrl(DateTime date)
    {
        return $"/statements/{BankAccount}/{date.Year}/{date.Month}";
    }

    private string DottedBankAccount(string bankAccount)
    {
        if (string.IsNullOrEmpty(bankAccount))
            throw new ArgumentException("bankAccount must have a value");

        if (bankAccount.Length != 11)
            throw new ArgumentException("bankAccount must have 11 digits");
        
        return $"{bankAccount[0..4]}.{bankAccount[5..7]}.{bankAccount[6..]}";
    }
}
